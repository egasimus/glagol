((lambda ()

  (var freeport (require "freeport"))
  (var path     (require "path"))

  (return (object

    "create" (lambda ()
      (return (/models/sampler)))

    "spawn" (lambda (sampler-id) (return (/lib/q/Promise (lambda (win fail)
      (.done (.spread (/lib/q/all (array
        (/lib/q/nfcall freeport) (/lib/q/nfcall freeport)
        /jack/control /jack/patchbay)) do-spawn))

      (function do-spawn (local-p remote-p control patchbay)
        (var sampler ((get ./state sampler-id)))
        (/jack/after-start/done (lambda ()
          (= sampler.local-port  local-p)
          (= sampler.remote-port remote-p)
          (var args (array "-n" sampler.id "-p" remote-p "-c" "system:playback_1"))
          (var opts (object "stdio" "inherit"))
          (= sampler.proc ((. (require "child_process") spawn)
            ./options/sampler-path args opts))
          (sampler.proc.on "exit" (lambda (code sig)
            (console.log "sampler" sampler-id "died")))
          (.set (get ./state sampler-id) sampler)
          (patchbay.on "ClientAppeared" (lambda client-appeared (ver id name)
            (patchbay.GetClientPID id (lambda (e pid)
              (if e (throw e))
              (if (=== pid sampler.proc.pid) (block
                (control.removeListener "ClientAppeared" client-appeared)
                (= sampler.jack-id   id)
                (= sampler.jack-name name)
                (= sampler.osc (new (.-UDPPort (require "osc")) (object
                  "localAddress"  "127.0.0.1" "localPort"  local-p
                  "remoteAddress" "127.0.0.1" "remotePort" remote-p)))
                (sampler.osc.open)
                (.set (get ./state sampler-id) sampler)
                (win sampler))))))))))))))

    "kill" (lambda (sampler-id) (return (/lib/q/Promise (lambda (win fail)
      (var sampler ((get ./state sampler-id)))
      (if (! sampler.proc)
        (return (fail (+ "sampler " sampler-id " not started"))))
      (if (!== sampler.proc.exit-code null)
        (return (fail (+ "sampler " sampler-id " already exited"))))
      (sampler.proc.once "close" (lambda (code signal)
        (.proc.set (get ./state sampler-id) sampler.proc)
        (win "sampler killed")))
      (sampler.proc.kill)))))

    "clip" (object

      "add" (lambda (sampler-id)
        (console.log "add clip to" sampler-id)
        (var clip (/models/clip))
        (.clips.push (get /session/state/sampler sampler-id) clip)
        (return (clip.id)))

      "load" (lambda (sampler-id clip-no sample)
        (console.log "load clip" sample "in slot" clip-no "of" sampler-id)
        (var sampler (get ./state sampler-id))
        (.path.set (sampler.clips.get clip-no) sample)
        (if (sampler.proc)
          (.send (sampler.osc) (object
            "address"   "/load"
            "args"      (array clip-no (path.join /library/options/dir sample)))
            "localhost" (.-options.remote-port (sampler.osc)))))

      "cue" (lambda (sampler-id clip-no cue-no position)
        (return (./set-cue ((get (./state) sampler-id)) clip-no cue-no position)))

      "play" (lambda (sampler-id clip-no cue-no)
        (console.log "play" sampler-id clip-no cue-no)
        (var sampler (get ./state sampler-id))
        (console.log (sampler.proc))
        (if (sampler.proc)
          (.send (sampler.osc) (object
            "address"   "/play"
            "args"      (array (|| clip-no 0) (|| cue-no 0)))
            "localhost" (.-options.remote-port (sampler.osc)))))

    )

  ))

))
