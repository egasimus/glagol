(lambda (glagol-opts client-path common-path)

  (var path (require "path"))

  (try
    ; create a server-side glagol instance to keep track of the client code
    (var client (glagol (path.resolve __dirname client-path)))

    ; make one for shared client/server code too, and overlay it on top
    (if common-path (block
      (var common (glagol (path.resolve __dirname common-path)))
      (.map (array "error" "observ" "q") (lambda (name)
        (= (get client.nodes.lib.nodes (+ name ".esl"))
          (get common.nodes.lib.nodes (+ name ".esl")))))
      (= (get client.nodes "models") (get common.nodes "models")))

    ; return a route handler bound to this client instance
    (return (handler.bind null client))

    (catch e (return (err e "Error initializing client:")))))

  (function handler (client req res)

    ; not the handler you're looking for?
    (if (!== req.url "/") (return false))

    (try
      ; bundle the client code into a snapshot and get dependency map
      (var app (object
        "ice"  (./freeze client)
        "deps" (./deps client)))
      (catch e (return (err e "Error creating initial client snapshot:"))))

    (try
      ; instantiate browserify and add common glagol dependencies
      (var br ((require "browserify")))
      (br.require "glagol" (object "expose" "glagol"))
      (shim br "./client/runtimes.js" "../runtimes/index.js")
      (shim br "./client/thaw.js"     "__glagol_thaw")

      ; add client-specific dependencies, dependency map, and client source
      (.map (Object.keys app.deps.ids) (lambda (module)
        (br.require module (object "expose" (get app.deps.ids module)))))

      ; roll it all into a big bundle
      (var embed (. (.parse (require "url") req.url true) query embed))
      (var ctype (+ "text/" (?: embed "javascript" "html") "; charset=utf-8"))
      (br.bundle (lambda (err data)
        (if err (throw err))
        (= data (String data))
        ((require "send-data") req res
          (object "body" ((?: embed just wrap-html) (wrap-js data))
                  "headers" (object "Content-Type" ctype)))))

      (catch e (err "Error bundling client code:")))

    ; ok that was it, route no further

    (return true)

    ; helper functions

    (function glagol (source-path) (return
      ((require "glagol") source-path glagol-opts)))

    (function err (e msg)
      (console.error msg)
      (console.log e.stack)
      (if (&& req req.headers req.headers.accept req.headers.accept.index-of
              (< -1 (req.headers.accept.index-of "text/html")))
        ((require "send-data/html") req res
          (object "statusCode" 500 "body" (err-to-html e)))
        ((require "send-data/error") req res (object "body" e))))

    (function err-to-html (e) (return (+
      "<head><meta charset=\"utf-8\"></head>"
      "<body><pre><strong>" e.message "</strong>\n\n" e.stack "</pre></body>")))

    (function just (x) (return x))

    (function wrap-html (x) (return (+
      "<head><meta charset=\"utf-8\"></head><body><script>" x "</script>")))

    (function wrap-js (x) (return (+
      ";(function(deps, ice){"
      "var " x ";"
      "require(\"glagol\").require.install(deps, require);"
      "var app = require(\"__glagol_thaw\")(ice);"
      "app.tree().main(app)"
      "})(" (JSON.stringify app.deps.deps) "," (JSON.stringify app.ice) ")")))

    (function shim (b p q)
      (b.require (path.join __dirname p) (object "expose" q)))))
