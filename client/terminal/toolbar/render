(fn [screen state]
  (let [width   screen.width
        height  screen.height
        program screen.program
        tput    screen.tput

        times (fn [n c] (apply str (repeat n c)))

        top (fn [t] (times (+ t.length 2) "▄"))

        bottom (fn [t] (times (+ t.length 2) "▀"))

        btn (fn [x t] (str
          (tput.cup 0 x)
            (top t)
          (tput.cup (- screen.height 1) x)
            (bottom t)
          (tput.cup (Math.floor (/ screen.height 2)) x)
            (str #_"█" " " t #_"█")))

        btn-r (fn [x t]
          (btn (- width x t.length 2) t))

  ]

  (program.enable-mouse)

  (program.on :mouse (fn [evt] (process.exit)))

  (program._write (str
    (tput.sc) (tput.civis) (tput.clear)

    (btn 1 (or state.bpm "???"))
    (btn 7 :BPM)

    (btn 14 :4)
    (btn 18 :4)

    (btn 23 "1 bar")
    (btn 31 " Q ")

    (btn 38 :REW)
    (btn 44 :PLAY)
    (btn 51 :REC)

    (btn-r 1  "JACK"     state.jack-up)
    (btn-r 8  "OSC ↓ ↑" )
    (btn-r 18 "MIDI ↓ ↑")
    (btn-r 29 "KBD ↓"   )

    (tput.rc) (tput.cnorm)))

  ))

    ;(screen.children.map (fn [c] (c.destroy)))

    ;(.map
      ;[ (btn :left 1 (or state.bpm "???"))
        ;(btn :left 7 :BPM)

        ;(btn :left 14 "4")
        ;(btn :left 18 "4")

        ;(btn :left 23 "1 bar")
        ;(btn :left 31 " Q ")

        ;(btn :left 38 :REW)
        ;(btn :left 44 :PLAY)
        ;(btn :left 51 :REC)

        ;(btn :right 1  "JACK"     state.jack-up)
        ;(btn :right 8  "OSC ↓ ↑" )
        ;(btn :right 18 "MIDI ↓ ↑")
        ;(btn :right 29 "KBD ↓"   ) ]
      ;(fn [b] (screen.append b)))

    ;(screen.render)))
