function splitChildren (children) {
  var re1 = /(\d+x\d+),(\d),(\d)(,\d+|{[\dx,\[\]\{\}]+})?/
    , re2 = /,?(.+?,.+?,.+?,[\d\{}]+)/g
    , ch  = []
    , c   = null;
  while ((c = re2.exec(children)) !== null) {
    ch.push(c[1]);
  }
  return ch;
}

function parse (layout) {
  var re   = /(\d+x\d+),(\d+),(\d+)(,\d+|{[\dx,\[\]\{\}]+})/
    , l    = re.exec(layout)

    , node = {
        width:    Number(l[1].split('x')[0]),
        height:   Number(l[1].split('x')[1]),
        offset:   Number(l[2]),
        wtf:      Number(l[3]),
        window:   Number(l[4].slice(1)) || null,
        split:    null,
        children: []
      };

  if (isNaN(Number(l[4]))) {
    if (l[4][0] === "{") {
      node.split = "vertical";
    } else if (l[4][0] === "[") {
      node.split = "horizontal";
    }
    node.children = splitChildren(l[4].slice(1,-1)).map(parse);
  } else {
    node.window = l[4];
  }

  return node;
}

