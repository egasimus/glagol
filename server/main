(let [

  index
    0

  play-track
    (fn [t]
      (let [track (aget ./tracks t)]
        (if (aget track.seq index)
          (track.chain.play))))

  step
    (fn []
      (let [info (str index)]
        (log.as :step index :foo)
        (.map (keys ./tracks) play-track)
        (set! index (if (< index 7) (+ index 1) 0))))

  transport
    (./transport/each step)

  keyboard
    (./keyboard (fn [c k]
      (cond
        (and k.ctrl (= k.name :c)) (process.exit)
                    (= k.name :t)  (./tap-tempo))))

] (-> (./jack/init) (.progress (fn [msg] (log.as :jack-init msg))) (.done))

  { :undo (fn []
      (transport.undo)
      (keyboard.undo)) })
