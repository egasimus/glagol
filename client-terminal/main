(let [B
        (require "blessed")

      screen
        (B.screen { :smartCSR true })

      n-times
        (fn [n c]
          (loop [i 0 v ""] (if (< i n) (recur (+ i 1) (str v c)) v)))

      add-box
        (fn [parent align x y w c]
          (let [default (assoc { :fg c } align x)]
            (.map ["▄" "█" "▀"] (fn [ch i]
              (parent.append (B.text (assoc default
                :content (n-times w ch) :top (+ y i)))))))
          parent)

      add-text
        (fn [parent align x y fg bg c]
          (parent.append
            (B.text (assoc { :content c :fg fg :bg bg :top y } align x)))
          parent)

      add-clips
        (fn [parent x y n c]
          (loop [i 0]
            (let [top    (+ (* i 2) y)
                  text   { :bg c :fg :black :top (+ top 1) }
                  border { :inverse true :bg nil :fg c :left x }]
              (.map
                (.concat
                  (.map [ [ :content " ▶ "       :left x       :top (+ top 1) ]
                          [ :content "Clip 001 " :left (+ x 3) :top (+ top 1) ] ]
                    (fn [el] (apply assoc text el)))
                  (.map [ [ :content (n-times 12 (if (= i 0) "▂" "━")) :top top :inverse (if (= i 0) false true) ]
                          [ :content (n-times 12 "▅") :top (+ top 2)] ]
                    (fn [el] (apply assoc border el))))
                (fn [el] (parent.append (B.text el))))
              (if (< i (- n 1)) (recur (+ i 1)))))
          parent)

      add-scene
        (fn [parent y text]
          (let [w (- parent.width text.length 3)]
            (parent.append (B.text
              { :content (n-times w "━") :top y :left (+ text.length 2) :fg :black }))
            (parent.append (B.text { :content text :left 1 :top y }))
            parent))

  ]

  (-> screen
    (add-box  :left  1  0 9  :black)
    (add-text :left  2  1    :yellow nil    "174")
    (add-text :left  5  1    :yellow :black " BPM")

    (add-box  :left  11 0 7  :black)
    (add-text :left  12 1    :yellow nil    " 4/4 ")

    (add-box  :left  19 0 11 :black)
    (add-text :left  20 1    :yellow nil    " 1 Bar ")
    (add-text :left  27 1    :yellow :black " Q ")

    (add-box  :right 1  0 10  :black)
    (add-text :right 2  1     :yellow :black "MIDI ↓ ↑")

    (add-box  :right 12 0 9   :black)
    (add-text :right 13 1     :yellow :black "OSC ↓ ↑")

    (add-box  :right 22 0 7   :black)
    (add-text :right 23 1     :yellow :black "KBD ↓")

    (add-scene 4 "INTRO")

    (add-clips 10 3 1 :red)
    (add-clips 23 3 2 :yellow)

    (add-scene 9 "THEME")

    (add-clips 10 8 1 :red)
    (add-clips 23 8 1 :yellow)
    (add-clips 36 8 1 :green)
    (add-clips 49 8 1 :blue)

    (add-scene 12 "BUILDUP")

    (add-clips 10 11 2 :red)
    (add-clips 23 11 1 :yellow)
    (add-clips 36 11 2 :green)
    (add-clips 49 11 2 :blue)

)

  (set! screen.title "etude demo")
  (screen.enable-mouse)
  (screen.key ["escape" "q" "C-c"] (fn [c k] (process.exit)))
  (screen.key ["escape" "q" "C-c"] (fn [c k] (screen.render)))
  (screen.render)

  { :undo (fn [] (screen.destroy)) })
