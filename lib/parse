(let [split-nodes (fn [nodes]
        (let [re (RegExp ",?(.+?,.+?,.+?,[\\d\\{}]+)")
              nn  []]
          (loop [nnn nodes]
            (let [n (re.exec nnn)]
              (if (= n null)
                nn
                (do
                  (nn.push (aget n 1))
                  (recur (nnn.slice (.-length (aget n 0))))))))))]

  (fn parse-layout-string [layout]
    (let [re   (RegExp "(\\d+x\\d+),(\\d+),(\\d+)(,\\d+|{[\\dx,\\[\\]\\{\\}]+})")
          l    (re.exec layout)
          node { :width    (Number (aget (.split (aget l 1) "x") 0))
                 :height   (Number (aget (.split (aget l 1) "x") 1))
                 :offset   (Number (aget l 2))
                 :wtf      (Number (aget l 3))
                 :window   (or (Number (.slice (aget l 4) 1)) nil)
                 :split    nil
                 :children [] }]

        (if (is-na-n (Number (aget l 4)))
          (do
            (cond
              (= (aget (aget l 4) 0) "{") (set! node.split :vertical)
              (= (aget (aget l 4) 0) "[") (set! node.split :horizontal)
              :else (throw))
            (let [nodes (split-nodes (.slice (aget l 4) 1 -1))]
              (log nodes)
              (set! node.children (nodes.map parse-layout-string))))
          (set! node.window (Number (aget l 4))))

        node)))
