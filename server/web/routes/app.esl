((lambda ()

  (var path (require "path"))

  (var client null)
  (var common null)
  (var client-path (path.resolve __dirname "../../../client/"))
  (var common-path (path.resolve __dirname "../../../common"))
  (var glagol-opts
    (object "eslisp" (object "transform" (array
      (require "eslisp-camelify")
      (require "eslisp-propertify")))))

  (function init-client ()
    (try
      ; create a server-side glagol instance for the client code
      (= client ((require "glagol") client-path glagol-opts))
      (= common ((require "glagol") common-path glagol-opts))
      (= (get client.nodes.lib.nodes "observ.esl")
        (get common.nodes.lib.nodes "observ.esl"))
      (= (get client.nodes "models") (get common.nodes "models"))
      (catch e (return (err e "Error initializing client:")))))

  (return (lambda (req res)

    ; not the handler you're looking for?
    (if (!== req.url "/") (return false))

    (if (=== null client) (init-client))

    (try
      ; bundle the client code into a snapshot and get dependency map
      (var app (object
        "ice"  (../cryo/freeze client)
        "deps" (../cryo/deps client)))
      (catch e (return (err e "Error creating initial client snapshot:"))))

    (try
      ; instantiate browserify and add common glagol dependencies
      (var br ((require "browserify")))
      (br.require "glagol" (object "expose" "glagol"))
      (shim br "../client/runtimes.js" "../runtimes/index.js")
      (shim br "../client/thaw.js"     "__glagol_thaw")

      ; add client-specific dependencies, dependency map, and client source
      ((. (Object.keys app.deps.ids) map) (lambda (module)
        (br.require module (object "expose" (get app.deps.ids module)))))

      ; roll it all into a big bundle
      (var embed (. ((. (require "url") parse) req.url true) query embed))
      (var ctype (+ "text/" (?: embed "javascript" "html") "; charset=utf-8"))
      (br.bundle (lambda (err data)
        (if err (throw err))
        (= data (String data))
        ((require "send-data") req res
          (object "body" ((?: embed just wrap-html) (wrap-js data))
                  "headers" (object "Content-Type" ctype)))))

      (catch e (console.error "Error bundling client:\n" e.stack)))

    ; that was it, look no further
    (return true)

    ; helper functions

    (function err (e msg)
      (console.error msg)
      (console.log e.stack)
      (if (&& req req.headers req.headers.accept req.headers.accept.index-of
              (< -1 (req.headers.accept.index-of "text/html")))
        ((require "send-data/html") req res
          (object "statusCode" 500 "body" (err-to-html e)))
        ((require "send-data/error") req res (object "body" e))))

    (function err-to-html (e) (return (+
      "<head><meta charset=\"utf-8\"></head>"
      "<body><pre><strong>" e.message "</strong>\n\n" e.stack "</pre></body>")))

    (function just (x)
      (return x))

    (function wrap-html (x) (return (+
      "<head><meta charset=\"utf-8\"></head><body><script>" x "</script>")))

    (function wrap-js (x) (return (+
      ";(function(deps, ice){"
      "var " x ";"
      "require(\"glagol\").require.install(deps, require);"
      "var app = require(\"__glagol_thaw\")(ice);"
      "app.tree().main(app)"
      "})(" (JSON.stringify app.deps.deps) "," (JSON.stringify app.ice) ")")))

    (function rel (p)
      (return (path.join __dirname p)))

    (function shim (b p q)
      (b.require (rel p) (object "expose" q)))))

))

