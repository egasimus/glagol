(let [b
        ../templating/bless
      box-def
        { :left 0 :right 0 :height 1 :bg nil :fg "#111111"}
      box-top
        (fn [] (b.Box (assoc box-def :top 0 :ch "▄")))
      box-bottom
        (fn [] (b.Box (assoc box-def :top 2 :ch "▀")))
      box-mid
        (fn [content] (b.Text
          { :left 0 :right 0 :top 1 :height 1
            :bg "#111111" :padding { :left 1 :right 1 } :fg :yellow :content content}))
      box-make
        (fn [opts content]
          (let [box (b.Box opts)]
            (.map [(box-top) (box-mid content) (box-bottom)]
            (box.append.bind box))
            box))
      btn-left
        (fn [left] (fn [o v] (box-make
          { :left left :width (+ 2 v.length) :top 0 :height 3 } v)))
      btn-right
        (fn [right] (fn [o v] (box-make
          { :right right :width (+ 2 v.length) :top 0 :height 3 } v)))]

  { "#root-box"
    (fn [opts] (b.Box (merge { :top 0 :bottom 0 :left 0 :right 0 :bg "#111111"} opts)))

    ".toolbar"
    (fn [] (b.Box { :top 0 :left 0 :right 0 :height 3 :padding { :left 1 :right 1 }}))

    ".toolbar-bpm"             (btn-left  0)

    ".toolbar-tap"             (btn-left  6)

    ".toolbar-metre"           (btn-left  14)

    ".toolbar-quantize-toggle" (btn-left  22)

    ".toolbar-quantize-value"  (btn-left  28)

    ".toolbar-midi"            (btn-right 8)

    ".toolbar-midi-in"         (btn-right 4)

    ".toolbar-midi-out"        (btn-right 0)

    ".toolbar-osc"             (btn-right 23)

    ".toolbar-osc-in"          (btn-right 19)

    ".toolbar-osc-out"         (btn-right 15)

    ".toolbar-kbd"             (btn-right 34)

    ".toolbar-kbd-in"          (btn-right 30)

    ".toolbar-play"
    (fn [o v] (box-make { :align :center :left "50%-3" :width 5 :top 0 :height 3 } v))

    ".toolbar-record"
    (fn [o v] (box-make { :align :center :left "50%+3" :width 5 :top 0 :height 3} v))

    ".toolbar-rewind"
    (fn [o v] (box-make { :align :center :left "50%-9" :width 5 :top 0 :height 3} v))

    ".statusbar"
    (fn [] (b.Box { :bottom 0 :height 1 :left 0 :right 0 }))

    ".text"
    (fn [] (b.Box))

    ".session"
    (fn [] (b.Box))

    ".mixer"
    (fn [] (b.Layout { :bottom 1 :height 15 :left 0 :right 0 }))

    ".mixer-track"
    (fn [opts value]
      (let [width  15
            height 15
            args   { :bottom 0 :width (- width 1) :height height }
            box    (b.Box (merge args opts))]

      (box.append (b.Text {
        :bottom 1
        :height 1
        :left 1
        :right 0
        :content opts.name}))

      (box.append (b.Box {
        :bottom 0
        :height 1
        :left 0
        :right 0
        :ch "▄"
        :bg nil
        :fg opts.color}))

      (box.append (b.Box {
        :bottom 2
        :left 5
        :height (Math.round (or value 0))
        :width 2
        :bg :green }))

      (let [vu-num { :left 0 :fg :black }]
        (.map
          [ { :bottom 13 :content "   0 dB " }
            { :bottom 11 :content "  -6 "    }
            { :bottom 9  :content " -12 "    }
            { :bottom 7  :content " -18 "    }
            { :bottom 5  :content " -24 "    }
            { :bottom 3  :content " -48 "    }
            { :bottom 3  :content " -60 "    } ]
          (fn [n] (box.append (b.Text (merge vu-num n))))))

      ;(let [btn { :bg "#111111" :right 1 }]
        ;(.map
          ;[ { :bottom 10 :content " FX " }
            ;{ :bottom 8  :content " IO " }
            ;{ :bottom 6  :content " M "  }
            ;{ :bottom 4  :content " S "  }
            ;{ :bottom 2  :content " R "  } ]
          ;(fn [n] (box.append (b.Text (merge btn n))))))

      box))

    ".browser"
    (fn [opts]
      (let [box (b.List (merge
                  { :top 0 :bottom 0 :left 0 :width 40
                    :bg :black } opts))]
        box))

    })
