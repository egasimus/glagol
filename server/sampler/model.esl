((lambda ()

  (var freeport (require "freeport"))
  (var osc      (require "node-osc"))
  (var path     (require "path"))
  (var Q        (require "q"))
  (var shortid  (require "shortid"))
  (var spawn    (. (require "child_process") spawn))

  (return init)

  (function init (track-id)

    (console.log "init sampler" track-id)

    (var state (object
      "track" (get (../sequencer/state/tracks) track-id)
      "proc"  null))

    ((.
      (Q.spread
        (array ../jack/control ../jack/patchbay)
        (start.bind null state))
      catch)
        (../lib/error "error spawning sampler"))
    (return state))

  (function start (state control patchbay)
    (control.IsStarted is-jack-started)

    (function is-jack-started (e is-it)
      (if e (throw e))
      (if is-it (spawn-sampler) (control.on "ServerStarted" spawn-once)))

    (function premature-stop ()
      ; server stopped before client appeared
      (unlisten)
      (state.proc.on "exit" (lambda (code signal))
        (control.on "ServerStarted" spawn-once))
      (state.proc.kill))

    (function spawn-once ()
      (control.remove-listener "ServerStarted" spawn-once)
      (spawn-sampler))

    (function listen ()
      (control.on  "ServerStopped"  premature-stop)
      (patchbay.on "ClientAppeared" client-appeared))

    (function unlisten ()
      (control.remove-listener  "ServerStopped"  premature-stop)
      (patchbay.remove-listener "ClientAppeared" client-appeared))

    (function spawn-sampler ()
      (freeport (lambda (err port)
        (if err (throw err))
        (= state.osc-port port)
        (var args (array "-n" (shortid.generate) "-p" port "-c" "system:playback_1"))
        (var opts (object "stdio" "inherit"))
        (console.log "spawning" ./options/sampler-path (args.join " "))
        (= state.proc (spawn ./options/sampler-path args opts))
        (listen))))

    (function client-appeared (ver id name)
      (patchbay.GetClientPID id (lambda (e pid)
        (if e (throw e)
        (if (=== pid state.proc.pid)
          (block (unlisten) (client-found pid id name)))))))

    (function client-found (pid id name)
      (console.log "client" pid id name "is us" state)
      (= state.jack-id id)
      (= state.jack-name name)
      (connect-osc))

    (function connect-osc ()
      (= state.osc (new osc.Client "127.0.0.1" state.osc-port))
      (var track (state.track))
      (console.log state.track.step)
      (state.osc.send "/load" 0 track.path)
      (state.track.step play-step))

    (function play-step (step)
      (console.log "STEP" step ((. state.track.seq get) step)))


    )

))
