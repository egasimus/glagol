(lambda deps (node callback)

  (if node.nodes
    (descend node callback)
    (bundle-deps node callback))

  (function bundle-deps (node callback)

    ; prepare for recursive dependency detection
    (var resolve (require "resolve"))
    (var path    (require "path"))

    ; store all found dependencies and pass them to the callback when done
    (var result (object))
    (= (get result node.path)
      ((. ((require "detective") node.compiled) reduce)
        (lambda (x y)
          (= (get x y) (resolve.sync y (object "basedir" (path.dirname node.path))))
          (return x))
        (object)))

    (callback result))

  (function descend (node callback)
    (var combined-deps (object))
    (var nodes (Object.keys node.nodes))
    (var i 0)
    (nodes.map (lambda (n)
      (deps (get node.nodes n) (lambda (resolved-deps)
        (var paths (Object.keys resolved-deps))
        (paths.map (lambda (p)
          (= (get combined-deps p) (get resolved-deps p))))
        (++ i)
        (if (== i nodes.length) (callback combined-deps))))))))
