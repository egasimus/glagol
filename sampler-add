(fn add-sampler [filename]
  (let [api @api-client
        s   @state

        Q (require "q")

        instance
        { :file filename
          :path (.join (require "path") @sample-dir filename)
          :name (filename.substr (- filename.length 63)) 
          :port (+ 1024 (Math.floor (* (Math.random) (- 11024 1024)))) }]

    (set! instance.spawn
      (api.invoke "spawn"
        filename "/home/epimetheus/bin/sample_player"
        "-n" instance.port "-p" instance.port instance.path))

    (instance.spawn.then
      (fn [spawned]
        (.then (api.invoke "client" (str instance.port))
          (fn [client] (.then (client.invoke "port" "output")
            (fn [output-port] (.then (output-port.get "name")
              (fn [port-name] (console.log "client port" output-port port-name) (.then (api.get "system")
                (.then (Q.all [(api.invoke "connect" (str instance.port) port-name "system" "playback_1")
                               (api.invoke "connect" (str instance.port) port-name "system" "playback_2")
                               (api.invoke "listen"  (str instance.port))])
                  (fn [] (console.log "connected" port-name "of" filename "to system")))))))))))
      (fn [err]
        (console.log err) debugger nil)
      (fn [i]
        (console.log "spawn log"   i)))

    (.done
      (.then (api.get "system") (fn [sys] (console.log "system" sys)) (fn [err] (console.log "System err" err))))

    (state.value.set (assoc s :samplers (s.samplers.concat [instance])))))

;-------------------------------------

        ;(set! state.jack-process (jack.spawn
          ;spawn-key postmelodic "-n" jack-client-name
                                ;"-p" osc-port
                                ;sample))

;(fn [filename port-number]
  ;(swap! samplers conj (postmelodic filename port-number))
  ;(jack/connect
    ;(jack/port filename "output") -> [ (jack/hw "playback_1")
                                       ;(jack/hw "playback_2") ]))
