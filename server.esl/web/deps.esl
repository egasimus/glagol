(lambda deps (node callback)

  (if node.nodes
    (descend node callback)
    (bundle-deps node callback))

  (function bundle-deps (node callback)

    ; prepare recursive dependency detector
    (var cache (object))
    (var md    ((require "module-deps") (object "fileCache" cache)))

    ; store all found dependencies and pass them to the callback when done
    (var resolved-deps (object))
    (md.on "data" (lambda (data)
      (if (!= data.id node.path) (block
        (= (get resolved-deps data.id) ((. (require "shortid") generate)))))))
    (md.on "end" (lambda () (callback resolved-deps)))

    ; inject script's code into module-deps cache and start streaming deps
    (= (get cache node.path) node.compiled)
    (md.end (object "file" node.path)))

  (function descend (node callback)
    (var combined-deps (object))
    (var nodes (Object.keys node.nodes))
    (var i 0)
    (nodes.map (lambda (n)
      (deps (get node.nodes n) (lambda (resolved-deps)
        (var paths (Object.keys resolved-deps))
        (paths.map (lambda (p)
          (= (get combined-deps p) (get resolved-deps p))))
        (++ i)
        (if (== i nodes.length) (callback combined-deps))))))))
