((lambda ()

  (var Long (require "long"))
  (var osc (require "osc"))
  (var spawn (. (require "child_process") spawn))

  (function freeport (cb)
    ((require "freeport") (lambda (err port)
      (if err (throw err))
      (cb port))))

  (function daemon (name callback)

    (var d (get ./state/daemons name))

    (if (is-dead)
      (get-port
        start))

    (function is-dead ()
      (var p (d.proc))
      (var dead (|| (=== null p) p.dead false))
      (console.log "is" name "dead?" dead)
      (return dead))

    (function get-port (cb)
      (var p (d.port))
      (if p (cb p) (freeport cb)))

    (function start (port)

      (d.port.set port)
      (console.log "starting" name "on" port)

      (var cmd  (. (get ./options name) path))
      (var args (. (get ./options name) args))
      (var opts (object "stdio" "inherit"))
      (console.log "spawn" cmd args opts)

      (var proc (spawn cmd args opts))
      (proc.on "exit" (lambda (code signal)
        (= proc.dead true)
        (console.log name "exited with code" code)))
      (d.proc.set proc)

      (var osc-port (new osc.UDPPort (object
        "localAddress" "localhost"
        "localPort"    port)))
      (callback
        (osc-port.on.bind osc-port)
        (lambda ()
          (var addr (get arguments 0))
          (var args (Array.prototype.slice.call arguments 1))
          (osc-port.send (object "address" addr "args" args)
            "localhost" port))))

  )

  (return (lambda init-transport ()

    (console.log "init transport")

    (daemon "jackOsc" (lambda (on send)
      (send "/receive" (Long.fromString "FFFFFFF" false 16))
      (send "/status")
      (send "/current")
      (console.log "JACK" osc "JACK")))
    (daemon "klick" (lambda (on send)
      (console.log "KLICK" osc "K1LICK")))

  ))

))

