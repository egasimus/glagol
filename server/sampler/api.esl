(lambda ()

  (var freeport (require "freeport"))

  ;(var samplers (((require "observ-struct") (./state)))) ; dang!

  (function stringify (state)
    (return (JSON.stringify state (lambda (key val)
      (if (instanceof val (.-ChildProcess (require "child_process")))
        (return (object "killed" val.killed "pid" val.pid)))
      (if (instanceof val (.-UDPPort (require "osc")))
        (return true))
      (return val)))))

  (return (object

    "list" (lambda (cb)
      (if cb (./state (lambda (val) (cb (stringify val)))))
      (return (stringify (./state))))

    "add" (lambda ()
      (var samplers (./state))
      (var sampler  (../models/sampler))
      (var id (. (sampler) id))
      (= (get samplers id) sampler)
      (./state/set samplers)
      (return (sampler)))

    "spawn" (lambda (sampler-id) (return (../lib/q/Promise (lambda (win fail)
      (.done (.spread (../lib/q/all (array
        (../lib/q/nfcall freeport) (../lib/q/nfcall freeport)
        ../jack/control ../jack/patchbay)) do-spawn))

      (function do-spawn (local-p remote-p control patchbay)
        (var sampler ((get ./state sampler-id)))
        (../jack/after-start/done (lambda ()
          (= sampler.local-port  local-p)
          (= sampler.remote-port remote-p)
          (var args (array "-n" sampler.id "-p" remote-p "-c" "system:playback_1"))
          (var opts (object "stdio" "inherit"))
          (= sampler.proc ((. (require "child_process") spawn)
            ./options/sampler-path args opts))
          (.set (get ./state sampler-id) sampler)
          (patchbay.on "ClientAppeared" (lambda client-appeared (ver id name)
            (patchbay.GetClientPID id (lambda (e pid)
              (if e (throw e))
              (if (=== pid sampler.proc.pid) (block
                (control.removeListener "ClientAppeared" client-appeared)
                (= sampler.jack-id   id)
                (= sampler.jack-name name)
                (= sampler.osc (new (.-UDPPort (require "osc")) (object
                  "localAddress"  "127.0.0.1" "localPort"  local-p
                  "remoteAddress" "127.0.0.1" "remotePort" remote-p)))
                (sampler.osc.open)
                (.set (get ./state sampler-id) sampler)
                (win sampler))))))))))))))

    "kill" (lambda (sampler-id) (return (../lib/q/Promise (lambda (win fail)
      (var sampler ((get ./state sampler-id)))
      (if (! sampler.proc)    (return (fail "sampler not running")))
      (if sampler.proc.killed (return (fail "sampler already killed")))
      (sampler.proc.once "close" (lambda (code signal)
        (.proc.set (get ./state sampler-id) sampler.proc)
        (win "sampler killed")))
      (sampler.proc.kill)))))

    "clip" (object

      "add" (lambda (sampler-id)
        (console.log "add clip to" sampler-id)
        (var clip (../models/clip))
        (.clips.push (get ./state sampler-id) clip)
        (return (clip.id)))

      "load" (lambda (sampler-id clip-no path)
        (console.log "load clip" path "in slot" clip-no "of" sampler-id)
        (.path.set (.get (get ./state sampler-id "clips") clip-no) path)
        (return (./set-clip ((get (./state) sampler-id)) clip-no path)))

      "cue" (lambda (sampler-id clip-no cue-no position)
        (return (./set-cue ((get (./state) sampler-id)) clip-no cue-no position)))

    )

  ))

)
