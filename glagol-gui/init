(let [script document.current-script
      Q      (require "../etude/node_modules/q")
      engine (require "../etude/engine.wisp")
      http   (require "http")
      util   (require "../etude/util.js")
      vdom   (require "../etude/lib/vdom.wisp")

      _ (set! global.vdom vdom)
      _ (set! global.log  console.log)

      atoms
        (Q.Promise (fn [resolve]
          (http.get { :path "/atoms" }
            (util.handle-streaming-response (fn [data]
              (resolve (JSON.parse data)))))))

      deref
        (fn [atom]
          (atom.value))

      init
        (fn [atoms]
          (let [atom-paths
                  (Object.keys atoms)
                atom-names
                  (.map atom-paths (fn [atom-path]
                    (engine.translate (aget (atom-path.split "/") 2))))]
            (set! global.ATOM_NAMES atom-names))
          (set! global.ATOMS atoms)
          (.map (Object.keys atoms) (fn [idx]
            (let [atom (aget atoms idx)]
              (let [atom-name (engine.translate (aget (idx.split "/") 2))]
                (console.log "Installing atom" atom-name)
                (if (aget global atom-name)
                  (console.log (str "Warning: overriding existing global '" atom-name "'")))
                (set! (aget global atom-name)
                  (engine.make-atom atom.name atom.source))
                (console.log (aget global atom-name))))))
          (console.log 1 vdom)
          (console.log 2 document)
          (console.log 3 template)
          (console.log 4 @template)
          (console.log 5 vdom)
          (console.log 6 vdom.init)
          (console.log 7 (@template))
          (vdom.init script.parent-element @template))]

  (.done (atoms.then init)))
