(lambda () (return (object

  "list" (lambda ()
    (var samplers (((require "observ-struct") (./state)))) ; dang!
    (return (JSON.stringify samplers)))

  "add" (lambda ()
    (var samplers (./state))
    (var sampler  (../models/sampler))
    (var id (. (sampler) id))
    (= (get samplers id) sampler)
    (./state/set samplers)
    (return (sampler)))

  "spawn" (lambda (sampler-id)
    (console.log "let's spawn" sampler-id)
    (return (../lib/q/Promise (lambda (win fail)
      ((. (../lib/q/all (array ../jack/control ../jack/patchbay)) spread)
        (lambda (control patchbay)
          (var sampler ((get (./state) sampler-id)))
          (console.log "spawning" sampler)

          (control.IsStarted is-jack-started)
          (function is-jack-started (e status)
            (if e (fail e))
            (if status
              (do-spawn)
              (control.on "ServerStarted" (function spawn-after-jack-start ()
                (control.remove-listener "ServerStarted" spawn-after-jack-start)
                (spawn)))))

          (function do-spawn ()
            (var freeport (require "freeport"))
            ((. (../lib/q/all (array (Q.nfcall freeport) (Q.nfcall freeport)))
              spread) (lambda (local-p remote-)
                (= sampler.local-port  local-p)
                (= sampler.remote-port remote-p)
                (var args (array "-n" state.id "-p" remote-p "-c" "system:playback_1"))
                (var opts (object "stdio" "inherit"))
                (= sampler.proc ((. (require "child_process") spawn)
                  ./options/sampler-path args opts))
                (wait-for-sampler))))

          (function wait-for-sampler ()
            (control.on "ClientAppeared" (lambda client-appeared (ver id name)
              (patchbay.GetClientPID id (lambda (e pid)
                (if e (throw e))
                (if (=== pid sampler.proc.id) (block
                  (control.off "ClientAppeared" client-appeared)
                  (= sampler.jack-id   id)
                  (= sampler.jack-name name)
                  (= sampler.osc (new osc.UDPPort (object
                    "localAddress"  "127.0.0.1" "localPort"  state.local-port
                    "remoteAddress" "127.0.0.1" "remotePort" state.remote-port)))
                  (sampler.osc.open)
                  (win sampler))))))))

          (win "OKAY")))))))
    ;(return ((. (./spawn ((get (./state) sampler-id))) then)
    ;  (lambda (sampler)
    ;    (console.log "spawned" sampler)
    ;    (var state (./state))
    ;    (= (get state sampler.id) sampler)
    ;    (./state/set state)))))

  "kill" (lambda (sampler-id)
    (return (./kill ((get (./state) sampler-id)))))

  "set-clip" (lambda (sampler-id clip-no path)
    (return (./set-clip ((get (./state) sampler-id)) clip-no path)))

  "set-cue" (lambda (sampler-id clip-no cue-no position)
    (return (./set-cue ((get (./state) sampler-id)) clip-no cue-no position)))

)))
