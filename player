(fn player [sample]
  (let [osc-port (./osc/get-next-port)
        osc-send (./osc/bind-to osc-port)

        jack-client-name sample
        jack-port-name   (str sample ":output")
        jack-client      (./jack/client jack-client-name)

        event2 (require "eventemitter2")
        state  (event2.EventEmitter2.) ]

    (set! state.client  jack-client)
    (set! state.process nil)
    (set! state.started jack-client.started)
    (set! state.port    jack-client.port)
    (set! state.play    (fn [cue] (osc-send "/play" 0 (or cue 0))))
    (set! state.stop    (fn []    (osc-send "/stop" 0)))

    (./osc/on "message" (fn [msg]
      (if (= (str osc-port) (aget msg.args 0)) (do
        (cond
          (= "/loaded"  msg.address) (state.emit "loaded"  msg.args)
          (= "/stopped" msg.address) (state.emit "stopped" msg.args)
          (= "/playing" msg.address) (state.emit "playing" msg.args))))))

    (set! state.process
      (./jack/spawn sample ./playerPath
        "-n" jack-client-name "-p" osc-port sample))
    (set! state.kill (fn [signal] (state.process.kill signal)))

    (jack-client.then (fn []
      (log "jack client ready")
      (osc-send "/listen")))

    state))
