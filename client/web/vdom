(let [create    (require "virtual-dom/create-element")
      diff      (require "virtual-dom/diff")
      patch     (require "virtual-dom/patch")
      main-loop (require "main-loop")]

  { :create    create
    :diff      diff
    :h         (require "virtual-dom/h")
    :insertCss (require "insert-css")
    :patch     patch
    :mainLoop  main-loop

    :focusMe   (require "virtual-dom/virtual-hyperscript/hooks/focus-hook.js")

    :init
      (fn init [context template data]
        (let [tree (template data)
              node (create tree)]
          (context.replace-child node context.first-child)
          { :context  context
            :template template
            :tree     template
            :node     node     }))

    :update
      (fn update [view data]
        (let [new-tree (view.template data)
              patches  (diff view.tree new-tree)
              focused  false]
          (set! view.node (patch view.node patches))
          (set! view.tree new-tree)
          (Array.prototype.map.call
            (view.context.get-elements-by-class-name "focus-me")
            (fn [el]
              (if (not focused) (do (el.focus) (set! focused true)))
              (el.class-list.remove "focus-me")))
          view))

    :start
      (fn start [template state]
        (main-loop state template
          { :create create
            :diff   diff
            :patch  patch })) })
