(fn change [parsed new-parsed]
  (let [

    changer-D
      (fn [d]
        (if (and d.lhs.rendered d.lhs.rendered.parent)
          (d.lhs.rendered.parent.remove d.lhs.rendered)))

    changer-E
      (fn [d]
        (loop [path  d.path
               left  parsed
               right new-parsed]
          (cond
            (= (aget path 0) :children)
              (recur
                (path.slice 2)
                (aget left.children  (aget path 1))
                (aget right.children (aget path 1)))

            (< -1 (.index-of [:widget :options] (aget path 0)))
              (let [step         (aget path 0)
                    parent       left.rendered.parent
                    new-rendered (./render right)]
                (parent.insert-before new-rendered left.rendered)
                (parent.remove left.rendered)
                (set! left.rendered new-rendered)
                (set! (aget left step) (aget right step)))

            :else
              (throw (Error. (str
                "unknown fragment in diff path '" (path.join ".") "':"
                " '" (aget path 0) "'"))))))
    changer-A
      (fn [d]
        (loop [path  d.path
               left  parsed
               right new-parsed]
          (if (= (aget path 0) :children)
            (if (> path.length 1)
              (recur
                (path.slice 2)
                (aget left.children  (aget path 1))
                (aget right.children (aget path 1)))
              (do
                (log.as :array-change d.index d.item.kind (keys d.item))
                (cond
                  (= d.item.kind :D) (changer-D d.item))))
            (throw (Error. (str
              "unknown fragment in diff path '" (path.join ".") "':"
              " '" (aget path 0) "'"))))))

    changers
      { :D changer-D :E changer-E :A changer-A }

    diff
      (./compare parsed new-parsed) ]

    (if (> diff.length 0) (log diff.length :changes))

    (diff.map (fn [d]
      (log d.kind (d.path.join "."))
      ((aget changers d.kind) d)))))
