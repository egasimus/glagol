(fn [screen state]
  (let [bless   (require "etude-bless")


        bg
          (fn [al x w]   (bless.Box (assoc { :width w :bg :#111111 } al x)))

        top
          (fn []   (bless.Box { :ch "▄" :top 0 :height 1 :left 0 :right 0 :fg :#111111 }))

        text
          (fn [x] (bless.Text { :top :center :height 1 :content x :bg :#111111 :bg :#111111 :left 1 }))

        bottom
          (fn []   (bless.Box { :ch "▀" :bottom 0 :height 1 :left 0 :right 0 :fg :#111111 }))

        btn (fn [align x t is-on ev]
          (let [width (+ 2 t.length)
                box (bg align x width)
                top (top)
                text (text t)
                bottom (bottom)]

            (box.append top)
            (box.append bottom)
            (box.append text)

            box))
]

    (screen.children.map (fn [c] (c.destroy)))

    (.map
      [ (btn :left 1 (or state.bpm "???"))
        (btn :left 7 :BPM)

        (btn :left 14 "4")
        (btn :left 18 "4")

        (btn :left 23 "1 bar")
        (btn :left 31 " Q ")

        (btn :left 38 :REW)
        (btn :left 44 :PLAY)
        (btn :left 51 :REC)

        (btn :right 1  "JACK"     state.jack-up)
        (btn :right 8  "OSC ↓ ↑" )
        (btn :right 18 "MIDI ↓ ↑")
        (btn :right 29 "KBD ↓"   ) ]
      (fn [b] (screen.append b)))

    (screen.render)))
