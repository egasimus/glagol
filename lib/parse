;" This function parses the brief vector description of each node
  ;into a more explicit structure, implementing a sort of 'template AST'.

  ;Perhaps it would be wiser to slim this layer down, exploiting how
  ;similar each vector is to a list of function arguments. It might need
  ;a rethinking how template arguments fit together though... Any takers? "
  ;

(fn parse-template [widgets el]

  (cond

    (not (vector? el))
      (throw (Error. (str "element " el " must be an array")))

    (not (string? (aget el 0)))
      (throw (Error. (str "first item of element array " el " is not a string")))

    :else
      (let [parsed  { :name     (aget el 0)
                      :widget   (or (aget widgets (aget el 0)) :MissingWidget)
                      :options  {}
                      :children [] }
            arg1    (aget el  1)
            args    (el.slice 2)
            descend (parse-template.bind nil widgets)]

        (cond
          (string? arg1)
            (set! parsed.content arg1)

          (object? arg1) (do
            (set! parsed.options arg1)
            (if (= 1 args.length)
              (if (and (vector? (aget args 0)) (string? (aget (aget args 0) 0)))
                (set! parsed.children [(descend (aget args 0))])
                (set! parsed.content  (aget args 0)))
              (set! parsed.children (args.map (fn [el]
                (parse-template widgets el))))))

          (vector? arg1)
            (set! parsed.children (if (string? (aget arg1 0))
              [(descend arg1)] (arg1.map descend)))

          (not arg1) (do)

          :else
            (throw (Error. "unexpeced type of arg1 in element array")))

        parsed)))
