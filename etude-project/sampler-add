(fn sampler-add [filename]
  (let [api @api-client
        s   @state

        Q (require "q")

        instance
        { :file filename
          :path (.join (require "path") @sample-dir filename)
          :name (filename.substr (- filename.length 63)) 
          :port (+ 1024 (Math.floor (* (Math.random) (- 11024 1024))))

          :playing  false
          :position 0
          :duration 0 }]

    (set! instance.spawn
      (api.invoke "spawn"
        filename "/home/epimetheus/bin/sample_player"
        "-n" instance.port "-p" instance.port instance.path))

    (instance.spawn.then
      (fn [spawned]
        (.then (api.invoke "client" (str instance.port))
          (fn [client] (.then (client.invoke "port" "output")
            (fn [output-port] (.then (output-port.get "name")
              (fn [port-name] (console.log "client port" output-port port-name) (.then (api.get "system")
                (.then (Q.all [(api.invoke "connect" (str instance.port) port-name "system" "playback_1")
                               (api.invoke "connect" (str instance.port) port-name "system" "playback_2")
                               (api.invoke "listen"  (str instance.port))])
                  (fn [] (console.log "connected" port-name "of" filename "to system")))))))))))
      (fn [err]
        (console.error err))
      (fn [i]
        (console.log "spawn log ->" i)))

    (.on @events (str "samplers." instance.port ".playing") (fn [arg]
      (console.log "playing..." instance.port)
      (set! instance.playing true)
      (set! instance.position arg.pos)
      (set! instance.duration arg.dur)
      (state.value.set @state)))

    (.on @events (str "samplers." instance.port ".stopped") (fn []
      (console.log "stopped..." instance.port)
      (set! instance.playing false)
      (state.value.set @state)))

    (state.value.set (assoc s :samplers (conj s.samplers instance)))))

;-------------------------------------

        ;(set! state.jack-process (jack.spawn
          ;spawn-key postmelodic "-n" jack-client-name
                                ;"-p" osc-port
                                ;sample))

;(fn [filename port-number]
  ;(swap! samplers conj (postmelodic filename port-number))
  ;(jack/connect
    ;(jack/port filename "output") -> [ (jack/hw "playback_1")
                                       ;(jack/hw "playback_2") ]))
