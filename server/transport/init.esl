((lambda ()

  (var Long (require "long"))
  (var osc (require "osc"))
  (var spawn (. (require "child_process") spawn))

  (function freeport (cb)
    ((require "freeport") (lambda (err port)
      (if err (throw err))
      (cb port))))

  (function daemon (name callback)

    (var d (get ./state/daemons name))

    (if (is-dead)
      (get-port
        start))

    (function is-dead ()
      (var p (d.proc))
      (var dead (|| (=== null p) p.dead false))
      (console.log "is" name "dead?" dead)
      (return dead))

    (function get-port (cb)
      (var p (d.port))
      (if p (cb p) (freeport cb)))

    (function start (port)

      (d.port.set port)
      (console.log "starting" name "on" port)

      (var cmd  (. (get ./options name) path))
      (var args (. (get ./options name) args))
      (var opts (object "stdio" "inherit"))
      (console.log "spawn" cmd args opts)

      (var proc (spawn cmd args opts))
      (proc.on "exit" (lambda (code signal)
        (= proc.dead true)
        (console.log name "exited with code" code)))
      (d.proc.set proc)

      (set-timeout (lambda () (callback port)) 10000) ))

  (return (lambda init-transport ()

    (freeport (lambda (my-port)
      (console.log "init transport on" my-port)

      (var osc-port (new osc.UDPPort
        (object "localaddress" "localhost"
                "localport"    my-port)))
      (osc-port.open)
      (osc-port.on "message" (lambda () (console.log "hey jo" arguments)))

      (var send (lambda (port addr)
        (var args (Array.prototype.slice.call arguments 2))
        (osc-port.send (object "address" addr "args" args) "localhost" port)))

      (daemon "jackOsc" (lambda (p)
        (send p "/receive_at" (Long.fromString "FFFFFFF" false 16) (new Long my-port) "localhost")
        (send p "/status")
        (send p "/current")))

      (daemon "klick" (lambda (p)
        (send p "/ping"))) )) )) ))
