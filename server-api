(fn [socket]
  (let [jack
          (require "etude-jack")

        ;; osc
        osc
          (require "osc")
        osc-config
          { :localAddress "localhost"
            :localPort    11025 }
        osc-client
          (new osc.UDPPort osc-config)
        send-osc
          (fn [host port addr & args]
            (osc-client.send { :address addr :args args } host port))

        ;; transport
        time
          (require "etude-time")
        tempo
          120
        transport
          (time.make-transport tempo "4/4")

        ;; control
        nano
          (.connect @server-nanoktrl2)

        emit
          (fn [])

        api
          { :jack    (jack.init)
            :spawn   jack.spawn
            :client  jack.client
            :connect jack.connect-by-name
            :system  jack.system
            :play    (fn [port] (send-osc "localhost" port "/play" 0 0) 8)
            :listen  (fn [port] (send-osc "localhost" port "/listen")) 

            :start   (fn [] (transport.play))
            :stop    (fn [] (transport.stop)) }

        client
          ((require "q-connection") socket api)]

    (log "transport" transport)

    (set! emit (fn [evt arg] (client.invoke "emit" evt arg)))

    (osc-client.on "message" (fn [msg] (emit msg.address msg.args)))
    (osc-client.open)

    (transport.events.on "pulse" (fn []
      (emit "transport.pulse" transport.state.beats)))

    client))
