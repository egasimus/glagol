(let [
  url  (require "url")
  path (require "path")
  send (require "send-data/json")
  glob (require "glob")

  sounds
    []

  strip
    (fn [paths] (paths.map (fn [x] (path.relative ./sample-dir x))))

  filter-snd
    (fn [q snd]
      )
]
  (glob (path.join ./sample-dir "**" "*.wav") {}
    (fn [err files] (if err (throw err)) (set! sounds files)))

  (fn search [req res]
    (let [GET  (.-query (url.parse req.url true))
          fltr (fn [snd] (not (= -1 (.index-of (snd.to-lower-case) (GET.q.to-lower-case)))))
          snds (if GET.q (sounds.filter fltr) sounds)]
      (send req res
        { :query   GET.q
          :results (strip (snds.slice 0 50))
          :page    (or GET.q.page 1)
          :pages   (Math.ceil (/ snds.length 50)) }))) )
